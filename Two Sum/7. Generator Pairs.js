/**
 * Space Complexity: The amount of memory an algorithm needs to run.
 * Time Complexity: The amount of time an algorithm takes to complete as the input size grows.
 */

// A generator function that yields all unique pairs of indices from an array.
function* pairs(arr) {
  // Outer loop iterates from the first element to the second-to-last element.
  for (let i = 0; i < arr.length; i++) {
    // Inner loop iterates from the element *after* the current outer loop element to the last element.
    // This ensures we get unique pairs (e.g., (0,1) but not (1,0)) and avoid pairing an element with itself.
    for (let j = i + 1; j < arr.length; j++) {
      // Yields an array containing the two current indices (i and j).
      yield [i, j];
    }
  }
}

// Function to find two numbers in an array that sum up to a specific target.
function twoSum(nums, target) {
  // Iterates through all unique pairs of indices generated by the 'pairs' function.
  for (let [i, j] of pairs(nums)) {
    // Checks if the sum of the numbers at the current indices equals the target.
    if (nums[i] + nums[j] === target) {
      // If the sum matches, return an array containing the indices of those two numbers.
      return [i, j];
    }
  }
  // If no two numbers sum up to the target, the function implicitly returns undefined.
}